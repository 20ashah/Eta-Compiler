/* The following code was generated by JFlex 1.6.1 */

/*
 * THIS IS THE USER CODE SECTION
 *
 * UserCode
 *
 * Options and declarations
 *
 * Lexical rules
 */
package main.java.jdr299zdh5cew256ans96;

import main.java.jdr299zdh5cew256ans96.lexertokens.*;
import main.java.jdr299zdh5cew256ans96.cup.sym;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/main/java/jdr299zdh5cew256ans96/EtaLexer.flex</tt>
 */
public class EtaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int MULTILINECOMMENT = 4;
  public static final int STRINGLIT = 6;
  public static final int CHARACTER = 8;
  public static final int ERROR = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\61\1\62\1\63\1\61\22\0\1\21\1\36\1\32"+
    "\2\0\1\41\1\44\1\23\1\51\1\52\1\34\1\42\1\57\1\35"+
    "\1\60\1\33\1\11\11\12\1\56\1\55\1\43\1\37\1\40\2\0"+
    "\6\31\24\22\1\53\1\25\1\54\1\0\1\24\1\0\1\17\1\13"+
    "\1\6\1\10\1\5\1\16\1\22\1\47\1\1\1\22\1\50\1\14"+
    "\1\22\1\2\1\7\2\22\1\4\1\20\1\3\1\15\1\22\1\46"+
    "\1\26\2\22\1\27\1\45\1\30\7\0\1\62\u1fa2\0\1\62\1\62"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\2\1\3\6\4\2\1\3\4\1\5"+
    "\1\6\1\4\1\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\4\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\5\1\36\3\37\1\40"+
    "\1\41\2\42\1\43\1\42\1\44\1\2\1\4\1\45"+
    "\4\4\3\0\4\4\1\46\1\47\1\50\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\4\1\0\1\56\1\57"+
    "\1\56\1\41\1\60\1\61\1\60\1\62\1\60\1\63"+
    "\5\4\2\0\2\4\1\64\1\4\1\65\1\4\1\0"+
    "\2\60\1\66\1\67\1\70\2\4\1\71\2\0\1\4"+
    "\1\72\2\4\1\0\1\60\2\4\1\0\1\73\1\0"+
    "\1\74\1\75\1\76\1\77\1\0\1\100\2\60\1\101"+
    "\1\102\3\0\1\60\1\103\3\0\1\60\3\0\1\60"+
    "\3\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0138\0\u0410\0\u0138\0\u0138"+
    "\0\u0444\0\u0478\0\u04ac\0\u0138\0\u04e0\0\u0514\0\u0548\0\u0138"+
    "\0\u0138\0\u057c\0\u0138\0\u0138\0\u05b0\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u05e4\0\u0138\0\u0618\0\u064c\0\u0138\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\u0750\0\u0784\0\u0138\0\u07b8\0\u0270\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0138\0\u0138\0\u0138\0\u0138\0\u0a28\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0a5c\0\u0a90\0\u0138\0\u0138\0\u0a90\0\u0138"+
    "\0\u0ac4\0\u0138\0\u0af8\0\u0b2c\0\u0b60\0\u0270\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0270"+
    "\0\u0d68\0\u0138\0\u0d9c\0\u0dd0\0\u0138\0\u0e04\0\u0138\0\u0270"+
    "\0\u0270\0\u0e38\0\u0e6c\0\u0270\0\u0ea0\0\u0ed4\0\u0f08\0\u0270"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u0138"+
    "\0\u10a8\0\u0138\0\u0270\0\u0270\0\u0270\0\u10dc\0\u0138\0\u1110"+
    "\0\u1144\0\u0270\0\u0270\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u0138"+
    "\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\3\15\1\16"+
    "\1\17\1\20\1\15\1\21\1\22\2\15\1\23\1\15"+
    "\1\24\1\25\1\26\1\15\1\27\1\30\1\15\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\2\15\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\23\1\56\1\23"+
    "\61\57\1\60\36\57\1\61\27\57\11\62\1\63\13\62"+
    "\1\64\4\62\1\65\26\62\1\66\2\62\11\67\1\70"+
    "\11\67\1\71\1\67\1\72\33\67\1\73\2\67\61\74"+
    "\3\56\65\0\1\15\1\75\13\15\1\76\2\15\1\0"+
    "\3\15\1\0\1\15\2\0\1\15\14\0\3\15\14\0"+
    "\14\15\1\77\3\15\1\0\3\15\1\0\1\15\2\0"+
    "\1\15\14\0\3\15\14\0\3\15\1\100\14\15\1\0"+
    "\3\15\1\0\1\15\2\0\1\15\14\0\3\15\14\0"+
    "\4\15\1\101\13\15\1\0\3\15\1\0\1\15\2\0"+
    "\1\15\14\0\3\15\14\0\13\15\1\102\4\15\1\0"+
    "\3\15\1\0\1\15\2\0\1\15\14\0\3\15\14\0"+
    "\20\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\24\0\1\103\1\17\2\0\1\104\10\0\1\105"+
    "\46\0\2\17\52\0\3\15\1\106\2\15\1\107\11\15"+
    "\1\0\3\15\1\0\1\15\2\0\1\15\14\0\3\15"+
    "\14\0\17\15\1\110\1\0\3\15\1\0\1\15\2\0"+
    "\1\15\14\0\3\15\14\0\16\15\1\111\1\15\1\0"+
    "\3\15\1\0\1\15\2\0\1\15\14\0\3\15\34\0"+
    "\1\23\37\0\1\23\1\0\1\23\23\0\1\112\55\0"+
    "\1\104\10\0\1\105\67\0\1\113\64\0\1\114\1\115"+
    "\67\0\1\116\62\0\1\117\63\0\1\120\63\0\1\121"+
    "\63\0\1\122\25\0\20\15\1\0\3\15\1\0\1\15"+
    "\2\0\1\15\14\0\1\15\1\123\1\15\46\0\1\60"+
    "\45\0\1\124\10\0\1\124\35\0\2\125\3\126\10\125"+
    "\1\127\1\126\4\125\1\126\1\125\1\126\1\127\3\125"+
    "\1\126\31\125\32\66\1\130\31\66\23\131\1\132\55\131"+
    "\1\133\5\131\1\132\2\131\1\133\35\131\23\0\1\132"+
    "\40\0\15\131\1\133\5\131\1\134\1\131\1\135\1\133"+
    "\3\131\1\135\54\131\1\0\40\131\1\0\2\15\1\136"+
    "\15\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\14\0\13\15\1\137\4\15\1\0\3\15\1\0"+
    "\1\15\2\0\1\15\14\0\3\15\14\0\14\15\1\140"+
    "\3\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\14\0\2\15\1\141\2\15\1\142\12\15\1\0"+
    "\3\15\1\0\1\15\2\0\1\15\14\0\3\15\14\0"+
    "\17\15\1\143\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\24\0\1\103\1\17\100\0\1\144\63\0"+
    "\1\145\35\0\4\15\1\146\13\15\1\0\3\15\1\0"+
    "\1\15\2\0\1\15\14\0\3\15\14\0\6\15\1\147"+
    "\11\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\14\0\4\15\1\150\13\15\1\0\3\15\1\0"+
    "\1\15\2\0\1\15\14\0\3\15\14\0\13\15\1\151"+
    "\4\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\53\0\1\152\24\0\1\153\17\15\1\0\3\15"+
    "\1\0\1\15\2\0\1\15\14\0\3\15\42\0\1\154"+
    "\34\0\23\131\1\155\63\131\1\155\3\131\1\156\34\131"+
    "\23\0\1\157\40\0\23\131\1\157\40\131\1\0\13\15"+
    "\1\160\4\15\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\14\0\4\15\1\161\13\15\1\0\3\15"+
    "\1\0\1\15\2\0\1\15\14\0\3\15\14\0\14\15"+
    "\1\162\3\15\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\14\0\6\15\1\163\11\15\1\0\3\15"+
    "\1\0\1\15\2\0\1\15\14\0\3\15\14\0\4\15"+
    "\1\164\13\15\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\20\0\2\165\1\0\4\165\2\0\2\165"+
    "\11\0\1\165\37\0\2\166\1\0\4\166\2\0\2\166"+
    "\11\0\1\166\33\0\16\15\1\167\1\15\1\0\3\15"+
    "\1\0\1\15\2\0\1\15\14\0\3\15\14\0\13\15"+
    "\1\170\4\15\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\14\0\17\15\1\171\1\0\3\15\1\0"+
    "\1\15\2\0\1\15\14\0\3\15\14\0\13\15\1\172"+
    "\4\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\20\0\2\173\1\0\4\173\2\0\2\173\11\0"+
    "\1\173\32\0\5\131\2\174\1\131\4\174\2\131\2\174"+
    "\3\131\1\155\5\131\1\174\32\131\1\0\3\15\1\175"+
    "\14\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\3\15\14\0\3\15\1\176\14\15\1\0\3\15\1\0"+
    "\1\15\2\0\1\15\14\0\3\15\20\0\2\177\1\0"+
    "\4\177\2\0\2\177\10\0\1\200\1\177\37\0\2\201"+
    "\1\0\4\201\2\0\2\201\10\0\1\202\1\201\33\0"+
    "\20\15\1\0\3\15\1\0\1\15\2\0\1\15\14\0"+
    "\2\15\1\203\14\0\4\15\1\204\13\15\1\0\3\15"+
    "\1\0\1\15\2\0\1\15\14\0\3\15\14\0\4\15"+
    "\1\205\13\15\1\0\3\15\1\0\1\15\2\0\1\15"+
    "\14\0\3\15\20\0\2\206\1\0\4\206\2\0\2\206"+
    "\10\0\1\207\1\206\32\0\5\131\2\210\1\131\4\210"+
    "\2\131\2\210\3\131\1\155\4\131\1\211\1\210\32\131"+
    "\1\0\1\15\1\212\16\15\1\0\3\15\1\0\1\15"+
    "\2\0\1\15\14\0\3\15\14\0\7\15\1\213\10\15"+
    "\1\0\3\15\1\0\1\15\2\0\1\15\14\0\3\15"+
    "\20\0\2\214\1\0\4\214\2\0\2\214\10\0\1\200"+
    "\1\214\37\0\2\215\1\0\4\215\2\0\2\215\10\0"+
    "\1\202\1\215\37\0\2\216\1\0\4\216\2\0\2\216"+
    "\10\0\1\207\1\216\32\0\5\131\2\217\1\131\4\217"+
    "\2\131\2\217\3\131\1\155\4\131\1\211\1\217\55\131"+
    "\1\220\40\131\5\0\2\221\1\0\4\221\2\0\2\221"+
    "\10\0\1\200\1\221\37\0\2\222\1\0\4\222\2\0"+
    "\2\222\10\0\1\202\1\222\37\0\2\223\1\0\4\223"+
    "\2\0\2\223\10\0\1\207\1\223\32\0\5\131\2\224"+
    "\1\131\4\224\2\131\2\224\3\131\1\155\4\131\1\211"+
    "\1\224\32\131\5\0\2\225\1\0\4\225\2\0\2\225"+
    "\10\0\1\200\1\225\37\0\2\226\1\0\4\226\2\0"+
    "\2\226\10\0\1\202\1\226\37\0\2\227\1\0\4\227"+
    "\2\0\2\227\10\0\1\207\1\227\32\0\5\131\2\230"+
    "\1\131\4\230\2\131\2\230\3\131\1\155\4\131\1\211"+
    "\1\230\32\131\5\0\2\231\1\0\4\231\2\0\2\231"+
    "\10\0\1\200\1\231\37\0\2\232\1\0\4\232\2\0"+
    "\2\232\10\0\1\202\1\232\37\0\2\233\1\0\4\233"+
    "\2\0\2\233\10\0\1\207\1\233\32\0\5\131\2\234"+
    "\1\131\4\234\2\131\2\234\3\131\1\155\4\131\1\211"+
    "\1\234\32\131\30\0\1\200\63\0\1\202\63\0\1\207"+
    "\33\0\23\131\1\155\4\131\1\211\33\131";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\1\1\1\11\15\1\1\11\1\1\2\11"+
    "\3\1\1\11\3\1\2\11\1\1\2\11\1\1\13\11"+
    "\1\1\1\11\2\1\1\11\6\1\1\11\6\1\3\0"+
    "\4\1\4\11\1\0\4\11\1\1\1\0\2\11\1\1"+
    "\1\11\1\1\1\11\11\1\2\0\4\1\1\11\1\1"+
    "\1\0\1\11\1\1\1\11\5\1\2\0\4\1\1\0"+
    "\3\1\1\0\1\11\1\0\1\11\3\1\1\0\1\11"+
    "\4\1\3\0\1\1\1\11\3\0\1\1\3\0\1\1"+
    "\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    // string holds the stream of chars following a "
    StringBuffer string = new StringBuffer();  

    // Holds column number of a ' or "  or (/*)
    public int startCol;

    // Holds line number of a ' or " (/*)
    public int startLine;

    // errorCode is updated when a lexing error is scanned
    public EtaError.ERROR_CODE errorCode = EtaError.ERROR_CODE.NO_ERROR;

    /* Returns a new java_cup.runtime.Symbol object
     * 
     * Parameters: type corresponds to one of the terminal symbol values in sym.java
     *
     * Precondition: type is a valid .sym value
     *               token is a valid EtaToken class object
     *
     * Postcondition: a new Symbol object is returned with correct: .sym value, EtaToken type,
     *                column number, and line number
    */
    private Symbol symbol(int type, EtaToken token) {
      if (type == sym.STRING_LITERAL || type == sym.CHARACTER_LITERAL
      || (type == sym.ERROR
      && (errorCode == EtaError.ERROR_CODE.CHAR_ERROR
      || errorCode == EtaError.ERROR_CODE.UNMATCHED_CHAR_ERROR
      || errorCode == EtaError.ERROR_CODE.UNMATCHED_STRING_ERROR
      || errorCode == EtaError.ERROR_CODE.STRING_ERROR
      || errorCode == EtaError.ERROR_CODE.COMMENT_UNCLOSED
      || errorCode == EtaError.ERROR_CODE.INVALID_ESCAPE
      || errorCode == EtaError.ERROR_CODE.TOKEN_NOT_FOUND_ERROR))) {
        token.setCol(startCol);
        token.setLine(startLine);
      } else {
        token.setCol(yycolumn+1);
        token.setLine(yyline+1);
      }
      if (type == sym.STRING_LITERAL) {
        // Clear buffer
        string.delete(0,string.length());
      }
      return new Symbol(type, token);
    }

    // Returns yyline + 1 (yyline starts at 0) 
    public int lineNumber() { return yyline + 1; }
    
    // Returns yycolumn + 1 (yycolumn starts at 0)
    public int column() { return yycolumn + 1; }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EtaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              return symbol(sym.EOF, new EtaEOF());
            }
            case 157: break;
            case MULTILINECOMMENT: {
              errorCode = EtaError.ERROR_CODE.COMMENT_UNCLOSED; 
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
            case 158: break;
            case STRINGLIT: {
              errorCode = EtaError.ERROR_CODE.UNMATCHED_STRING_ERROR; 
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
            case 159: break;
            case CHARACTER: {
              errorCode = EtaError.ERROR_CODE.UNMATCHED_CHAR_ERROR; 
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
            case 160: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.INTEGER_LITERAL, new EtaIntLiteral(yytext()));
            }
          case 68: break;
          case 2: 
            { return symbol(sym.ERROR, new EtaError(errorCode));
            }
          case 69: break;
          case 3: 
            { startCol=yycolumn+1;
                                        startLine=yyline+1;
                                        errorCode = EtaError.ERROR_CODE.TOKEN_NOT_FOUND_ERROR; 
                                        yybegin(ERROR);
            }
          case 70: break;
          case 4: 
            { return symbol(sym.IDENTIFIER, new EtaIdentifier(yytext()));
            }
          case 71: break;
          case 5: 
            { yybegin(YYINITIAL);
            }
          case 72: break;
          case 6: 
            { startCol=yycolumn+1; startLine=yyline+1; yybegin(CHARACTER);
            }
          case 73: break;
          case 7: 
            { return symbol(sym.OPEN_BRACE, new EtaOpenBrace());
            }
          case 74: break;
          case 8: 
            { return symbol(sym.CLOSE_BRACE, new EtaCloseBrace());
            }
          case 75: break;
          case 9: 
            { startCol=yycolumn+1; startLine=yyline+1; yybegin(STRINGLIT);
            }
          case 76: break;
          case 10: 
            { return symbol(sym.DIVIDE, new EtaDivision());
            }
          case 77: break;
          case 11: 
            { return symbol(sym.TIMES, new EtaMultiplication());
            }
          case 78: break;
          case 12: 
            { return symbol(sym.MINUS, new EtaMinus());
            }
          case 79: break;
          case 13: 
            { return symbol(sym.NOT, new EtaNOT());
            }
          case 80: break;
          case 14: 
            { return symbol(sym.ASSIGN, new EtaAssign());
            }
          case 81: break;
          case 15: 
            { return symbol(sym.GT, new EtaGT());
            }
          case 82: break;
          case 16: 
            { return symbol(sym.MODULO, new EtaModulo());
            }
          case 83: break;
          case 17: 
            { return symbol(sym.PLUS, new EtaPlus());
            }
          case 84: break;
          case 18: 
            { return symbol(sym.LT, new EtaLT());
            }
          case 85: break;
          case 19: 
            { return symbol(sym.AND, new EtaAND());
            }
          case 86: break;
          case 20: 
            { return symbol(sym.OR, new EtaOR());
            }
          case 87: break;
          case 21: 
            { return symbol(sym.OPEN_PAREN, new EtaOpenParen());
            }
          case 88: break;
          case 22: 
            { return symbol(sym.CLOSE_PAREN, new EtaCloseParen());
            }
          case 89: break;
          case 23: 
            { return symbol(sym.OPEN_BRACKET, new EtaOpenBracket());
            }
          case 90: break;
          case 24: 
            { return symbol(sym.CLOSE_BRACKET, new EtaCloseBracket());
            }
          case 91: break;
          case 25: 
            { return symbol(sym.SEMICOLON, new EtaSemicolon());
            }
          case 92: break;
          case 26: 
            { return symbol(sym.COLON, new EtaColon());
            }
          case 93: break;
          case 27: 
            { return symbol(sym.COMMA, new EtaComma());
            }
          case 94: break;
          case 28: 
            { return symbol(sym.DOT, new EtaDot());
            }
          case 95: break;
          case 29: 
            { System.out.print(yytext());
            }
          case 96: break;
          case 30: 
            { /*Do Nothing*/
            }
          case 97: break;
          case 31: 
            { // Test each incoming char to see if it is an ASCII or not 
                                        int unicodeVal = Integer.valueOf(Integer.parseInt(yytext().codePoints().mapToObj(Integer::toHexString).findFirst().get(),16));

                                        // Normal text
                                        if (unicodeVal < 128) {
                                          string.append(yytext());   
                                        } 
                                        // Non-ASCII Unicode
                                        else {
                                          String escapedUni = "\\x{"+Integer.toHexString(unicodeVal)+"}";
                                          string.append(escapedUni);
                                        }
            }
          case 98: break;
          case 32: 
            { yybegin(YYINITIAL); 
                                        String result = string.toString();  // Store result in String before buffer is cleared
                                        return symbol(sym.STRING_LITERAL, new EtaStrLiteral(result));
            }
          case 99: break;
          case 33: 
            { if (yytext().indexOf('\"') == -1) {
                                            errorCode = EtaError.ERROR_CODE.UNMATCHED_STRING_ERROR; 
                                        } else {
                                            errorCode = EtaError.ERROR_CODE.STRING_ERROR;
                                        }
                                            return symbol(sym.ERROR, new EtaError(errorCode));
            }
          case 100: break;
          case 34: 
            { errorCode = EtaError.ERROR_CODE.UNMATCHED_CHAR_ERROR; 
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
          case 101: break;
          case 35: 
            { yybegin(ERROR); errorCode = EtaError.ERROR_CODE.CHAR_ERROR;
            }
          case 102: break;
          case 36: 
            { errorCode = EtaError.ERROR_CODE.CHAR_ERROR; yybegin(ERROR);
            }
          case 103: break;
          case 37: 
            { return symbol(sym.IF, new EtaIf());
            }
          case 104: break;
          case 38: 
            { startCol=yycolumn+1;
                                        startLine=yyline+1; 
                                        errorCode = EtaError.ERROR_CODE.CHAR_ERROR; yybegin(ERROR);
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
          case 105: break;
          case 39: 
            { startCol=yycolumn+1;
                                        startLine=yyline+1; 
                                        return symbol(sym.STRING_LITERAL, new EtaStrLiteral(""));
            }
          case 106: break;
          case 40: 
            { yybegin(COMMENT);
            }
          case 107: break;
          case 41: 
            { startCol=yycolumn+1; startLine=yyline+1; yybegin(MULTILINECOMMENT);
            }
          case 108: break;
          case 42: 
            { return symbol(sym.NOT_EQUAL, new EtaNotEquals());
            }
          case 109: break;
          case 43: 
            { return symbol(sym.EQUALS, new EtaEquals());
            }
          case 110: break;
          case 44: 
            { return symbol(sym.GEQ, new EtaGEQ());
            }
          case 111: break;
          case 45: 
            { return symbol(sym.LEQ, new EtaLEQ());
            }
          case 112: break;
          case 46: 
            { errorCode = EtaError.ERROR_CODE.INVALID_ESCAPE; yybegin(ERROR);
            }
          case 113: break;
          case 47: 
            { string.append(yytext());
            }
          case 114: break;
          case 48: 
            { if (yytext().indexOf('\'') == -1) {
                                            errorCode = EtaError.ERROR_CODE.UNMATCHED_CHAR_ERROR; 
                                        } else {
                                            errorCode = EtaError.ERROR_CODE.CHAR_ERROR; 
                                        }
                                        return symbol(sym.ERROR, new EtaError(errorCode));
            }
          case 115: break;
          case 49: 
            { // Test each incoming char to see if it is an ASCII or not
                                        String text = yytext().substring(0,yytext().length()-1);      // remove ending '
                                        int unicodeVal = Integer.valueOf(Integer.parseInt(text.codePoints().mapToObj(Integer::toHexString).findFirst().get(),16));

                                        // Normal text
                                        if (unicodeVal < 128) {
                                          yybegin(YYINITIAL);
                                          return symbol(sym.CHARACTER_LITERAL, new EtaCharacterLiteral(text));   
                                        } 
                                        // Non-ASCII Unicode
                                        else {
                                          String escapedUni = "\\x{"+Integer.toHexString(unicodeVal)+"}";
                                          yybegin(YYINITIAL);
                                          return symbol(sym.CHARACTER_LITERAL, new EtaCharacterLiteral(escapedUni));
                                        }
            }
          case 116: break;
          case 50: 
            { errorCode = EtaError.ERROR_CODE.UNMATCHED_CHAR_ERROR; 
                                        yybegin(ERROR);
            }
          case 117: break;
          case 51: 
            { return symbol(sym.INT, new EtaInt());
            }
          case 118: break;
          case 52: 
            { return symbol(sym.USE, new EtaUse());
            }
          case 119: break;
          case 53: 
            { return symbol(sym.HIGH_MULT, new EtaHighMultiplication());
            }
          case 120: break;
          case 54: 
            { String charVal = String.valueOf(yytext().substring(0,2));
                                        yybegin(YYINITIAL);
                                        return symbol(sym.CHARACTER_LITERAL, new EtaCharacterLiteral(charVal));
            }
          case 121: break;
          case 55: 
            { if (HelperCli.isRho) {
                                            	return symbol(sym.NULL, new RhoNull());
                                            }

                                            return symbol(sym.IDENTIFIER, new EtaIdentifier(yytext()));
            }
          case 122: break;
          case 56: 
            { return symbol(sym.TRUE, new EtaTrue());
            }
          case 123: break;
          case 57: 
            { return symbol(sym.ELSE, new EtaElse());
            }
          case 124: break;
          case 58: 
            { return symbol(sym.BOOL, new EtaBool());
            }
          case 125: break;
          case 59: 
            { int dec = Integer.parseInt(yytext().substring(3,yytext().length()-1));
                                        return symbol(sym.INTEGER_LITERAL, new EtaIntLiteral(""+dec));
            }
          case 126: break;
          case 60: 
            { int dec = Integer.parseInt(yytext().substring(3,yytext().length()-1), 16);
                                        return symbol(sym.INTEGER_LITERAL, new EtaIntLiteral(""+dec));
            }
          case 127: break;
          case 61: 
            { if (HelperCli.isRho) {
      	                                    	return symbol(sym.BREAK, new RhoBreak());
      	                                    }

      	                                    return symbol(sym.IDENTIFIER, new EtaIdentifier(yytext()));
            }
          case 128: break;
          case 62: 
            { return symbol(sym.FALSE, new EtaFalse());
            }
          case 129: break;
          case 63: 
            { return symbol(sym.WHILE, new EtaWhile());
            }
          case 130: break;
          case 64: 
            { int dec = Integer.parseInt(yytext().substring(3,yytext().length()-1), 16);
                                        if (dec >= 32 && dec <= 126) {
                                           String asciiRepresentation = String.valueOf((char)dec);
                                           string.append(asciiRepresentation);
                                           } else {
                                           string.append(yytext());
                                         }
            }
          case 131: break;
          case 65: 
            { return symbol(sym.RETURN, new EtaReturn());
            }
          case 132: break;
          case 66: 
            { if (HelperCli.isRho) {
      	                                        return symbol(sym.RECORD, new RhoRecord());
      	                                    }

      	                                    return symbol(sym.IDENTIFIER, new EtaIdentifier(yytext()));
            }
          case 133: break;
          case 67: 
            { int dec = Integer.parseInt(yytext().substring(3,yytext().length()-2), 16);
                                        if (dec >= 32 && dec <= 126) {
                                          String asciiRepresentation = String.valueOf((char)dec);
                                          yybegin(YYINITIAL);
                                          return symbol(sym.CHARACTER_LITERAL, new EtaCharacterLiteral(asciiRepresentation));
                                        } else {
                                            yybegin(YYINITIAL);
                                            return symbol(sym.CHARACTER_LITERAL, new EtaCharacterLiteral(yytext()));
                                        }
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java EtaLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        EtaLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new EtaLexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
